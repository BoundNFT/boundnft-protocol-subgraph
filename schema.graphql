# --------------------------------------
# Registry Entities
# --------------------------------------
# service entity, when we receiving an event we should wknow which pool is it
type ContractMapping @entity {
  # contract address
  id: ID!
  registry: Registry!
}

type Registry @entity {
  """
  Registry address
  """
  id: ID!
  bnftGenericImpl: Bytes!
  symbolPrefix: String!
  namePrefix: String!

  totalBNFTs: BigInt!
  bnfts: [BNFT!]! @derivedFrom(field: "registry")
}

# --------------------------------------
# BNFT Entities
# --------------------------------------
type BNFT @entity {
  """
  BNFT address
  """
  id: ID!
  registry: Registry!

  bnftProxy: Bytes!
  bnftImpl: Bytes!
  symbol: String!
  name: String!

  nftAsset: Bytes!
  nftSymbol: String!
  nftName: String!

  lifetimeMints: BigInt! # default: 0
  lifetimeBurns: BigInt! # default: 0
  lifetimeFlashLoans: BigInt! # default: 0

  totalTokens: BigInt!
  tokenItems: [TokenItem!]! @derivedFrom(field: "bnft")

  mintHistory: [Mint!]! @derivedFrom(field: "bnft")
  burnHistory: [Burn!]! @derivedFrom(field: "bnft")
  flashLoanHistory: [FlashLoan!]! @derivedFrom(field: "bnft")
}

type TokenItem @entity {
  """
  nft asset address + nft token id
  """
  id: ID!
  registry: Registry!
  bnft: BNFT!
  tokenId: BigInt!
  owner: Bytes!
  tokenUri: String!
  minter: Bytes!
}

type Mint @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  registry: Registry!
  bnft: BNFT!
  nftAsset: Bytes!
  nftTokenId: BigInt!
  user: Bytes!
  owner: Bytes!
  timestamp: Int!
}

type Burn @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  registry: Registry!
  bnft: BNFT!
  nftAsset: Bytes!
  nftTokenId: BigInt!
  user: Bytes!
  owner: Bytes!
  timestamp: Int!
}

type FlashLoan @entity {
  """
  tx hash
  """ # TODO: replace with blockNumber/timestamp + blockPosition
  id: ID!
  registry: Registry!
  bnft: BNFT!
  nftAsset: Bytes!
  nftTokenId: BigInt!
  target: Bytes!
  initiator: Bytes!
  timestamp: Int!
}
